var roi = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-14.47851562499998, 71.36590902752367],
          [-14.47851562499998, 33.60106251351961],
          [57.767578125000014, 33.60106251351961],
          [57.767578125000014, 71.36590902752367]]], null, false);


var date = ee.Date.fromYMD(2019, 6, 1);
var date2 = ee.Date.fromYMD(2019, 6, 10);
    
//Map.setCenter(8, 46.5, 7.5); //Alps
Map.setCenter(8, 46.5, 11); //Aletsch
Map.setOptions('terrain');

var s1VH = ee.ImageCollection('COPERNICUS/S1_GRD')
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
  .filter(ee.Filter.eq('instrumentMode', 'IW'))
  .filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'))
  .filterDate(date, date2)
  .filterBounds(roi)
  .select("VH")
  .median()

var water = ee.Image('MODIS/MOD44W/MOD44W_005_2000_02_24')
  .select("water_mask")
  
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function to mask clouds in the Landsat 8 collection

function maskl8clouds(image) {
  var qa = image.select('QA60')

  // Bits 4,5,6 are clouds Bit 0 are filled values.
  var cloudBitMask = 1 << 4;
  var cloudBitMask2 = 1 << 5;
  var cloudBitMask3 = 1 << 6;
  var fillMask = 1 << 0;

  // All flags should be set to zero/ smaller than 2, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0).and(
             qa.bitwiseAnd(cloudBitMask2).lt(2).and(
             qa.bitwiseAnd(cloudBitMask3).lt(2).and(
              qa.bitwiseAnd(fillMask).eq(0))))

  // Return the masked data, without the QA bands.
  return image.updateMask(mask)
      .select("B.*")
      .copyProperties(image, ["system:time_start"])
}

// rename the bands for a later merge with S2 data (bands must have the same name to be merged)
function renameBands(image) {
    var bands = ['B2', 'B3', 'B4', 'B5', 'B6', 'BQA'];
    var new_bands = ['B2', 'B3', 'B4', 'B8', 'B11', 'QA60'];
    return image.select(bands).rename(new_bands).multiply(1000);
}

var bandsl8 = ['B2', 'B3', 'B4', 'B5', 'B6', 'BQA'];

// Since the cloud mask function does not work perfectly (The bits sometimes contain clouds even if specified as no clouds),
// a second cloud filtering is taken where only scenes with x% clouds are considered
var collectionl8 = ee.ImageCollection("LANDSAT/LC08/C01/T1_TOA")
    .filterDate(date, date2)
    .filter(ee.Filter.lt('CLOUD_COVER', 20))
    .select(bandsl8)
    .map(renameBands)
    .map(maskl8clouds)
    .filterBounds(roi)

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function to mask clouds in the Sentinel 2 collection, basically the same function as for L8

function maskS2clouds(image) {
  var qa = image.select('QA60')

  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;

  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0).and(
             qa.bitwiseAnd(cirrusBitMask).eq(0))

  // Return the masked and scaled data, without the QA bands.
  return image.updateMask(mask).divide(10)
      .select("B.*")
      .copyProperties(image, ["system:time_start"])
}

var bandss2 = ['B2', 'B3', 'B4', 'B8', 'B11', 'QA60'];

var collections2 = ee.ImageCollection('COPERNICUS/S2')
    .filterDate(date, date2)
    // Pre-filter to get less cloudy granules.
    .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
    .select(bandss2)
    .map(maskS2clouds)
    .filterBounds(roi)
    
    var composites2 = collections2.median()
    
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Merge the L8 and S2 collections and get the NDSI. NDSI > 0 means the pixel contains snow, however a threshold of 0.4 seems to be more suitable

var collection = collectionl8.merge(collections2)
var composite = collection.median()

var NDSI = ee.Image.cat(
  composite.expression("(green - swir) / (green + swir)", {
  swir: composite.select("B11"),
  green: composite.select("B3")
}).rename("ndsi"))

var snowextent1 = NDSI.gt(0.4)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Add the MODIS snow cover product to fill the gaps of missing ndsi caused by cloud cover

var collectionMOD = ee.ImageCollection('MODIS/006/MOD10A1')
    .filterDate(date, date2)
    .select('NDSI_Snow_Cover')
    .filterBounds(roi)
    .median()
    
var snowextent2 = collectionMOD.gt(1)
var snowextent = snowextent2.gt(0)

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//create a SAR reference, then SAR ratio images (in dB its a ratio, in DN it's a subtraction (SARscene - SARreference)
// mask the result with the snowcover from modis or the snowcover derived from L8+S2 and apply a watermask

var s1REFVH = ee.ImageCollection('COPERNICUS/S1_GRD')
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
  .filter(ee.Filter.eq('instrumentMode', 'IW'))
  .filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'))
  .filterDate('2017-11-01', '2018-02-01')
  .filterBounds(roi)
  .select("VH")
  .median();             
  
var x1 = s1VH.subtract(s1REFVH)
  var diffMasked = x1.updateMask(x1.lt(-2))
  var diffMasked2 = diffMasked.updateMask(water.eq(0))
  var diffMasked2 = diffMasked.updateMask(water.eq(0))
  var s1ratioVH = diffMasked2.updateMask(snowextent.gt(0))

Map.addLayer(s1VH, {min:-26, max:-1,}, 'S1VH', false)

var REFmasked = s1REFVH.updateMask(water.eq(0))
Map.addLayer(REFmasked, {min:-26, max:-1,}, 'REFmasked', false)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Optical mosaic from S2 and L8
// This product can be used for an optical check

var vizParamsRGB = {
  bands: ['B4', 'B3', 'B2'],
  min: 35,
  max: 320,
  gamma: [1.7, 1.8, 1.2]
};

 var vizParamsBRIGHT = {
  bands: ['B4', 'B3', 'B2'],
  min: 40,
  max: 1100,
  gamma: [3.5, 3.55, 3.3]
};

 var vizParamsWATER = {
  bands: ['B4', 'B3', 'B2'],
  min: 40,
  max: 320,
  gamma: [1.7, 1.7, 1.3]
};

var RGB = collection.median()

// Make bright areas (snow) a little bit darker to see features in the snow
var mask = RGB.gt(200);
var bright = mask;
bright = RGB.mask(bright);

// add watermask to display water more blue
var indices = ee.Image.cat(
  RGB.expression("(green - nir) / (green + nir)", {
  nir: RGB.select("B8"),
  green: RGB.select("B3")
}).rename("ndwi"),
  RGB.expression("(green - mir) / (green + mir)", {
  mir: RGB.select("B11"),
  green: RGB.select("B3")
}).rename("mndwi"))

var watermask = indices.expression('b("ndwi") > 0 && b("mndwi") > 0.3')
var snowmask = RGB.select("B4").gt(180);
var snowmask2 = snowmask.not();
var water = watermask.mask(snowmask2);
water = RGB.mask(water);

//Mosaic the different surface types with different visualizations
var mosaic = ee.ImageCollection([
  RGB.visualize(vizParamsRGB),
  bright.visualize(vizParamsBRIGHT),
  water.visualize(vizParamsWATER),
]).mosaic();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

var opacity = 0.7;
var opacity2 = 0.5;

var water1 = ee.Image('MODIS/MOD44W/MOD44W_005_2000_02_24').select("water_mask")
var drysnow = NDSI.updateMask(NDSI.select('ndsi').gt(0));
var drysnow2 = drysnow.updateMask(water1.eq(0))
var drysnow3 = collectionMOD.updateMask(collectionMOD.select('NDSI_Snow_Cover').gt(10));
var drysnow4 = drysnow3.updateMask(water1.eq(0))

// Display the products on the map
Map.addLayer(mosaic, {}, 'custom mosaic S2+L8', false); 
Map.addLayer(drysnow2, {max:1, palette: ["00e0f0"]}, 'snow/ice clouds', false, opacity)
Map.addLayer(drysnow4, {max:1, palette: ["0000ff"]}, 'snow MODIS', true, opacity2)
Map.addLayer(s1ratioVH, {max:1, palette: ["red"]}, 'wetSnow', true, opacity)
